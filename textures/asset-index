#include "uuids.as"

void main(ResourceIndex@ index)
{
  TextureImportSettings importLosslessNormalmap;
  TextureImportSettings importLosslessRgb;
  TextureImportSettings importLosslessRgba;
  importLosslessRgb.format = TextureFormat::RGB;
  importLosslessRgb.type = TextureType::UINT8;
  importLosslessRgba.format = TextureFormat::RGBA;
  importLosslessRgba.type = TextureType::UINT8;
  importLosslessNormalmap.format = TextureFormat::RGB;
  importLosslessNormalmap.type = TextureType::INT8;
  importLosslessNormalmap.sourceIsNormalMap = true;
  
  TextureSampler samplerInterpolated;
  TextureSampler samplerNearest;
  
  samplerNearest = samplerInterpolated;
  samplerNearest.magFilter = TextureFilter::NEAREST;
  samplerNearest.minFilter = TextureFilter::LINEAR;
  samplerNearest.mipFilter = TextureFilter::LINEAR;

  index.convertTexture(textureFile: "fallback-normal-map.texture", sourceFile: "fallback-normal-map.png", settings: importLosslessNormalmap);
  index.convertTexture(textureFile: "fallback-srmo.texture", sourceFile: "fallback-srmo.png", settings: importLosslessRgba);
  index.convertTexture(textureFile: "black.texture", sourceFile: "black.png", settings: importLosslessRgb);
  index.convertTexture(textureFile: "white.texture", sourceFile: "white.png", settings: importLosslessRgb);

  index.convertTexture(textureFile: "fruit-plate-4x4.texture", sourceFile: "fruit-plate-4x4.png", settings: importLosslessRgb);
  index.convertTexture(textureFile: "fruit-plate-256x256.texture", sourceFile: "fruit-plate-256x256.png", settings: importLosslessRgb);
  
  index.convertTexture(textureFile: "color-grid.texture", sourceFile: "color-grid.png", settings: importLosslessRgb);
  index.convertTexture(textureFile: "uv-grid.texture", sourceFile: "uv-grid.png", settings: importLosslessRgb);
  
  index.convertTexture(textureFile: "transparency-test.texture", sourceFile: "transparency-test.png", settings: importLosslessRgba);
  
  index.registerTextureFile(uuid: uuids::textures::fallback_normal_map, file: "fallback-normal-map.texture", defaultSampler: samplerInterpolated, generateMipmaps: true);
  index.registerTextureFile(uuid: uuids::textures::fallback_srmo_map, file: "fallback-srmo.texture", defaultSampler: samplerInterpolated, generateMipmaps: true);
  index.registerTextureFile(uuid: uuids::textures::black, file: "black.texture", defaultSampler: samplerInterpolated, generateMipmaps: true);
  index.registerTextureFile(uuid: uuids::textures::white, file: "white.texture", defaultSampler: samplerInterpolated, generateMipmaps: true);
  index.registerTextureFile(uuid: uuids::textures::color_grid, file: "color-grid.texture", defaultSampler: samplerInterpolated, generateMipmaps: true);
  index.registerTextureFile(uuid: uuids::textures::uv_grid, file: "uv-grid.texture", defaultSampler: samplerNearest, generateMipmaps: true);
  index.registerTextureFile(uuid: uuids::textures::transparency_text, file: "transparency-test.texture", defaultSampler: samplerInterpolated, generateMipmaps: true);

  index.registerTextureFile(uuid: uuids::textures::fruit_plate_4x4, file: "fruit-plate-4x4.texture", defaultSampler: samplerInterpolated, generateMipmaps: false);
  index.registerTextureFile(uuid: uuids::textures::fruit_plate_256x256, file: "fruit-plate-256x256.texture", defaultSampler: samplerInterpolated, generateMipmaps: false);
  
  TexturedMaterial colorgrid_test_material;
  TexturedMaterial uvgrid_test_material;
  TexturedMaterial transparency_test_material;
  
  colorgrid_test_material.basecolor_map = TextureHandle(uuids::textures::color_grid);
  uvgrid_test_material.basecolor_map = TextureHandle(uuids::textures::uv_grid);
  
  transparency_test_material.basecolor_map = TextureHandle(uuids::textures::transparency_text);
  transparency_test_material.masked = true;
  transparency_test_material.two_sided = true;
  
  index.registerMaterial(uuid: uuids::materials::colorgrid_test,
                         material: colorgrid_test_material);
  index.registerMaterial(uuid: uuids::materials::uvgrid_test,
                         material: uvgrid_test_material);
                         
  index.registerMaterial(uuid: uuids::materials::transparency_test,
                         material: transparency_test_material);
}
